{
  "code": "var Handler = Laya.Handler;\r\nvar Loader = Laya.Loader;\r\nexport default class ZipLoader {\r\n    constructor() {\r\n        this.handler = null;\r\n        this.fileNameArr = [];\r\n        this.resultArr = [];\r\n    }\r\n    static load(fileName, handler) {\r\n        this.instance.loadFile(fileName, handler);\r\n    }\r\n    loadFile(fileName, handler) {\r\n        this.handler = handler;\r\n        Laya.loader.load(fileName, new Handler(this, this.zipFun), null, Loader.BUFFER);\r\n    }\r\n    zipFun(ab, handler) {\r\n        this.handler = handler;\r\n        Laya.Browser.window.JSZip.loadAsync(ab).then((jszip) => {\r\n            this.analysisFun(jszip);\r\n        });\r\n    }\r\n    analysisFun(jszip) {\r\n        this.currentJSZip = jszip;\r\n        for (var fileName in jszip.files) {\r\n            this.fileNameArr.push(fileName + \"\");\r\n        }\r\n        this.exeOne();\r\n    }\r\n    exeOne() {\r\n        this.currentJSZip.file(this.fileNameArr[0]).async('text').then((content) => {\r\n            this.over(content);\r\n        });\r\n    }\r\n    over(content) {\r\n        var fileName = this.fileNameArr.shift();\r\n        this.resultArr.push(fileName);\r\n        this.resultArr.push(content);\r\n        if (this.fileNameArr.length != 0) {\r\n            this.exeOne();\r\n        }\r\n        else {\r\n            this.handler.runWith([this.resultArr]);\r\n        }\r\n    }\r\n}\r\nZipLoader.instance = new ZipLoader();\r\n",
  "references": []
}
